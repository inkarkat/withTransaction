#!/bin/bash
###############################################################################
##
# FILE:		withTransaction
# PRODUCT:	withTransaction
# AUTHOR:	Ingo Karkat <ingo@karkat.de>
# DATE CREATED:	21-Oct-2020
#
###############################################################################
# CONTENTS:
#   Execute a command on a file that is protected by a lock.
#
# REMARKS:
#
# @(#)withTransaction	$Id$	withTransaction
###############################################################################

: ${WITHTRANSACTION_COMMAND_JOINER=;}
: ${WITHTRANSACTION_FILE_MARKER='{}'}
fileMarker="$WITHTRANSACTION_FILE_MARKER"; unset WITHTRANSACTION_FILE_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-f|--transacted-file FILE [-l|--lock-file LOCK-FILE] [-r|--read-only|--rollback-on-failure] [--timeout SECONDS] [--transaction-timeout TX-TIMEOUT] [--silence-transaction-errors] [--transaction-owner OWNER-ID] [--drop-argument ARG [...]] -c|--command COMMANDLINE [...]|[--] SIMPLECOMMAND [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '--check|--upgrade-to-write-transaction [--timeout SECONDS] [--transaction-timeout TX-TIMEOUT] [--silence-transaction-errors]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMANDs that work with FILE while its (cooperative) access is protected
by a file lock, so only one instance can write to the file or multiple instances
can simultaneously read from it.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --transacted-file|-f FILE
		The file that is protected by the lock.
    --lock-file|-l LOCK-FILE
		The file used for locking and storing a copy of FILE contents
		for rollback. Defaults to a hidden variant of FILE with a .lock
		extension, in the same directory as FILE: ./.FILE.lock
    --read-only|-r
		Allows simultaneous read access of multiple instances by
		promising that COMMANDs will not modify the FILE.
    --rollback-on-failure
		If COMMAND fails, any writes to FILE will be
		automatically undone.
    --timeout SECONDS
		Fail if the lock to check for / start a transaction cannot be
		acquired within SECONDS (instead of waiting indefinitely)
		(because another transaction is still active). 0 means fail
		rather than wait if the lock cannot be acquired immediately.
    --transaction-timeout TX-TIMEOUT
		A transition is automatically aborted if more than TX-TIMEOUT
		(default 3) seconds passed since the invocation of COMMANDs.
    --silence-transaction-errors
		Don't print transaction-related errors.
    --transaction-owner OWNER-ID
		Use OWNER-ID instead of the invoking script's PID.
    --drop-argument ARG
		Remove ARG from SIMPLECOMMAND; this makes it possible for
		clients to simply forward all of their given command-line
		arguments and invoke themselves without having to filter out a
		--transactional argument that enabled transactional handling in
		the first place.
    --command|-c "COMMANDLINE"
		Execute the passed command line. When this is a simple command,
		it can also be passed as such.${fileMarker:+ $fileMarker is replaced with the
		LOCK-FILE.}
    --check	COMMANDs can invoke this to test whether the current transaction
		(established by the outer $(basename "$1") call) is still valid
		or whether it has already timed out.
    --upgrade-to-write-transaction
		COMMANDs can invoke this to change the current transaction that
		was started with -r|--read-only (and hasn't become shared) to
		also allow modifications of FILE.
		Until the end of COMMANDs (or TX-TIMEOUT, which is extended), no
		other reads or updates to FILE are possible.

EXIT STATUS:
    0	Complete success.
    2	Bad invocation, wrong or missing command-line arguments.
    5	Time out while waiting to start a transaction.
    6	The current transaction has taken too long (TX-TIMEOUT) and has been
	aborted.
    *   any exit status from COMMAND(s)
Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '-f /tmp/pingtimes -c "ping -c 4 localhost >> {}"'
}

action=
transactedFilespec=
lockFilespec=
mode=write
isRollbackOnFailure=
waitTimeout=
transactionTimeout=3
typeset -a lockControllerArgs=()
isSilenceTransactionErrors=
transactionOwner=$PPID
typeset -a dropArguments=()
commands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--transacted-file|-f)
			shift; transactedFilespec="$1"; shift;;
	--lock-file|-l)	shift; lockFilespec="$1"; shift;;
	--read-only|-r)	shift; mode=read;;
	--rollback-on-failure)
			shift; isRollbackOnFailure=t;;
	--timeout)	shift; waitTimeout="$1"; shift;;
	--transaction-timeout)
			shift; transactionTimeout="$1"; shift;;
	--silence-transaction-errors)
			isSilenceTransactionErrors=t; lockControllerArgs+=("$1"); shift;;
	--transaction-owner)
			shift; transactionOwner="${1:?}"; shift;;
	--drop-argument)
			shift; dropArguments+=("$1"); shift;;
	--command|-c)	shift; commands+="${commands:+ $WITHTRANSACTION_COMMAND_JOINER }$1"; shift;;
	--check|--upgrade-to-write-transaction)
			action="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
case "$action" in
    ?*)
	if [ -z "$WITHTRANSACTION_TRANSACTED_FILESPEC" -o -z "$WITHTRANSACTION_LOCK_FILESPEC" -o -z "$WITHTRANSACTION_MODE" -o -z "$WITHTRANSACTION_OWNER" ]; then
	    printf 'ERROR: Not within a transaction; %s can only be called by COMMANDs of a %s execution.\n' "$action" "$(basename "$0")"
	    exit 2
	fi >&2

	transactedFilespec="$WITHTRANSACTION_TRANSACTED_FILESPEC"
	lockFilespec="$WITHTRANSACTION_LOCK_FILESPEC"
	mode="$WITHTRANSACTION_MODE"
	transactionOwner="$WITHTRANSACTION_OWNER"
	;;
    '')
	if [ $# -ne 0 ]; then
	    if [ ${#dropArguments[@]} -eq 0 ]; then
		typeset -a simpleCommand=("$@")
	    else
		typeset -a simpleCommand=()
		for arg
		do
		    contains "$arg" "${dropArguments[@]}" || simpleCommand+=("$arg")
		done
	    fi

	    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	    # undo the effects of eval.
	    printf -v quotedSimpleCommand '%q ' "${simpleCommand[@]}"
	    printf -v escapedFileMarker %q "$fileMarker"
	    commands+="${commands:+ $WITHTRANSACTION_COMMAND_JOINER }${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
	fi
	if [ -z "$transactedFilespec" ]; then
	    echo 'ERROR: Missing -f|--transacted-file FILE.'
	    echo
	    printUsage "$0"
	    exit 2
	elif [ -z "$commands" ]; then
	    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
	    echo
	    printUsage "$0"
	    exit 2
	elif [ "$isRollbackOnFailure" ] && [ "$mode" = read ]; then
	    echo 'ERROR: Cannot combine --rollback-on-failure with -r|--read-only.'
	    echo
	    printUsage "$0"
	    exit 2
	elif [ "${transactionOwner:0:1}" = '*' ]; then
	    echo >&2 'ERROR: OWNER-ID must not start with *.'
	    echo >&2
	    printUsage "$0" >&2
	    exit 2
	fi >&2

	if [ -z "$lockFilespec" ]; then
	    lockDirspec="$(dirname -- "$transactedFilespec")"
	    lockFilespec="${lockDirspec%/}/.$(basename -- "$transactedFilespec").lock"
	fi
	;;
esac


lockedCall()
{
    local method="${1:?}"; shift
    flock "$@" --conflict-exit-code 5 ${waitTimeout:+--timeout "$waitTimeout"} "$lockFilespec" transactionalLockController "${lockControllerArgs[@]}" "$method" "$transactedFilespec" "$lockFilespec" "$transactionOwner" "$mode" "$transactionTimeout"
}
startTransaction()
{
    SECONDS=0
    local error
    while :
    do
	error="$(lockedCall TX-START)" || exit $?
	[ ! "$error" ] && break

	if [ -n "$NOW" -o \( -n "$waitTimeout" -a $SECONDS -ge ${waitTimeout:-0} \) ]; then
	    [ "$isSilenceTransactionErrors" ] || printf >&2 '%s\n' "$error"
	    exit 5
	fi

	sleep "${WITHTRANSACTION_BLOCK_DELAY:-0.01s}"
    done
}
upgradeTransaction()
{
    lockedCall TX-UPGRADE
}
endTransaction()
{
    lockedCall TX-END
}
abortWriteTransaction()
{
    lockedCall TX-ABORT
}
checkTransaction()
{
    lockedCall TX-CHECK --shared
}


case "$action" in
    --check)
	checkTransaction
	exit $?
	;;
    --upgrade-to-write-transaction)
	mode=write
	upgradeTransaction
	exit $?
	;;
esac

startTransaction || exit $?
    export \
	WITHTRANSACTION_TRANSACTED_FILESPEC="$transactedFilespec" \
	WITHTRANSACTION_LOCK_FILESPEC="$lockFilespec" \
	WITHTRANSACTION_MODE="$mode" \
	WITHTRANSACTION_OWNER="$transactionOwner"

    interpolatedCommands="${commands//"$fileMarker"/$transactedFilespec}"
    eval "$interpolatedCommands"; status=$?
    if [ $status -ne 0 ] && [ "$isRollbackOnFailure" ]; then
	abortWriteTransaction || status=$?
	exit $status
    fi
endTransaction || status=$?
exit $status
