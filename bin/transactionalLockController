#!/bin/bash
###############################################################################
##
# FILE:		transactionalLockController
# PRODUCT:	withTransaction
# AUTHOR:	Ingo Karkat <ingo@karkat.de>
# DATE CREATED:	04-Apr-2019
#
###############################################################################
# CONTENTS:
#   Lock manipulation to implement lightweight transactions for single files.
#
# REMARKS:
#
# @(#)transactionalLockController	$Id$	withTransaction
###############################################################################
set -o noglob
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: flock --conflict-exit-code 5 [--timeout WAIT_TIMEOUT] LOCK_FILESPEC %q %s\n' "$(basename "$1")" '[--silence-transaction-errors] TX-START|TX-UPGRADE|TX-END|TX-ABORT|TX-CHECK TRANSACTED-FILESPEC LOCK-FILESPEC OWNER read|write TX-TIMEOUT [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Lock handling (including shared read lock ownership) via a separate
LOCK_FILESPEC controlling access to TRANSACTED-FILESPEC.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --silence-transaction-errors
			Suppress error messages around existing or timed out
			transactions.
HELPTEXT
}

errorPrintf()
{
    printf >&2 "ERROR: ${1:?}" "${@:2}"
}
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--silence-transaction-errors)
			shift; errorPrintf() { :; };;
	TX-*)		break;;
	*)		{ echo "ERROR: Missing TX-*."; echo; printUsage "$0"; } >&2; exit 2;;
    esac
done
method="${1:?}"; shift
transactedFilespec="${1:?}"; shift
lockFilespec="${1:?}"; shift
thisTransactionOwner="${1:?}"; shift
thisTransactionMode="${1:?}"; shift
thisTransactionTimeout="${1?}"; shift

: ${NOW:=$(date +%s)}


existsLock()
{
    IFS=' ' read -r lockExpiry lockMode lockOwner < "$lockFilespec"
}
isLockExpired()
{
    if [ $NOW -gt $lockExpiry ]; then
	diff=$((NOW - lockExpiry))
	diffPlural=s; [ $diff -eq 1 ] && diffPlural=
	return 0
    else
	return 1
    fi
}
createLock()
{
    printf > "$lockFilespec" '%s %s %s\n' "${thisTransactionExpiry:?}" "${thisTransactionMode:?}" "${thisTransactionOwner:?}"
    if [ -e "$transactedFilespec" ]; then
	cat -- "$transactedFilespec" >> "$lockFilespec"
    fi
}
rollback()
{
    local recordLen="$(head -n 1 -- "$lockFilespec" | wc --bytes)"
    if cmp --silent --ignore-initial="${recordLen}:0" "$lockFilespec" "$transactedFilespec"; then
	return 99
    else
	tail -n +2 "$lockFilespec" > "$transactedFilespec"
    fi
}
removeLock()
{
    > "$lockFilespec"
}
isSharedOwnership()
{
    [ "${lockOwner:0:1}" = '*' ]
}
getTransactionDescription()
{
    if isSharedOwnership; then
	printf 'shared %s transaction' "$lockMode"
    else
	printf '%s transaction by %s' "$lockMode" "$lockOwner"
    fi
}

case "$method" in
    TX-START)
	thisTransactionExpiry=$((NOW + thisTransactionTimeout))
	if existsLock; then
	    if isLockExpired; then
		if rollback; then
		    printf >&2 'Warning: Previous %s timed out %d second%s ago and has been rolled back.\n' "$(getTransactionDescription)" "$diff" "$diffPlural"
		else
		    printf >&2 'Warning: Previous %s timed out %d second%s ago but did not do any changes.\n' "$(getTransactionDescription)" "$diff" "$diffPlural"
		fi
	    else
		if [ "$lockMode" = 'read' -a "$thisTransactionMode" = 'read' -a $thisTransactionExpiry -le $lockExpiry ]; then
			# This transaction does not prolong the existing lock of
			# another read transaction(s). We can allow it.
			if [ "$lockOwner" != "$thisTransactionOwner" ]; then
			    # If the previous transaction is not ours, set the
			    # owner to *N (where N is the number of
			    # participating transactions) to indicate that this
			    # is a shared set of read transactions.
			    transactionCount=2; isSharedOwnership && let transactionCount=${lockOwner:1}+1
			    thisTransactionOwner="*$transactionCount"
			fi
			thisTransactionExpiry=$lockExpiry
		elif [ "$lockOwner" = "$thisTransactionOwner" ]; then
		    errorPrintf 'Another %s is already in progress.\n' "$(getTransactionDescription)"
		    exit 1
		else
		    printf 'Timed out while another %s is in progress.\n' "$(getTransactionDescription)"
		    exit 0
		fi
	    fi
	fi
	createLock
	;;
    TX-UPGRADE)
	if existsLock; then
	    if [ "$lockOwner" = "$thisTransactionOwner" ]; then
		if isLockExpired; then
		    printf >&2 'Warning: Current transaction timed out %d second%s ago.\n' "$diff" "$diffPlural"
		elif [ "$lockMode" = 'write' ]; then
		    echo >&2 'Note: Current transaction already is a write transaction, no need to upgrade.'
		fi
		thisTransactionExpiry=$((NOW + thisTransactionTimeout))
		createLock
	    elif isLockExpired; then
		errorPrintf 'Another %s has started already (and timed out %d second%s ago).\n' "$(getTransactionDescription)" "$diff" "$diffPlural"
		exit 6
	    else
		errorPrintf 'Another %s is already in progress.\n' "$(getTransactionDescription)"
		exit 6
	    fi
	else
	    errorPrintf 'Not inside a transaction, or the transaction has timed out and another transaction was completed.\n'
	    exit 6
	fi
	;;
    TX-END)
	if existsLock; then
	    if [ "$lockOwner" = "$thisTransactionOwner" ] || isSharedOwnership; then
		if isLockExpired; then
		    if isSharedOwnership; then
			printf >&2 'Warning: Shared %s transaction timed out %d second%s ago.\n' "$lockMode" "$diff" "$diffPlural"
		    else
			printf >&2 'Warning: Current transaction timed out %d second%s ago.\n' "$diff" "$diffPlural"
		    fi
		elif isSharedOwnership && [ ${lockOwner:1} -ge 2 ]; then
		    # We cannot simply remove the lock; this would immediately
		    # invalidate any other shared transactions, even though
		    # there's still time until transaction expiry. Instead,
		    # decrement the count and only remove the lock when we're
		    # down to 1.
		    thisTransactionMode="$lockMode"
		    thisTransactionOwner="*$((${lockOwner:1} - 1))"
		    thisTransactionExpiry=$lockExpiry
		    createLock
		    exit
		fi
	    else
		errorPrintf 'Another %s has been started; any changes have been lost.\n' "$(getTransactionDescription)"
		exit 6
	    fi
	else
	    errorPrintf 'Not inside a transaction, or the transaction has timed out and another transaction was completed.\n'
	    removeLock
	    exit 6
	fi
	removeLock
	;;
    TX-ABORT)
	if existsLock; then
	    if [ "$lockOwner" != "$thisTransactionOwner" ]; then
		printf >&2 'Warning: Another %s has been started; any changes have been lost, anyway.\n' "$(getTransactionDescription)"
		exit 0
	    elif [ "$lockMode" != 'write' ]; then
		errorPrintf 'Not in a write transaction.\n'
		exit 2
	    fi
	    rollback
	else
	    echo >&2 'Warning: Not inside a transaction, or the transaction has timed out and another transaction was completed.'
	fi
	removeLock
	;;
    TX-CHECK)
	if existsLock; then
	    if [ "$lockOwner" = "$thisTransactionOwner" -a "$thisTransactionMode" = 'write' -a "$lockMode" != 'write' ]; then
		errorPrintf 'Not in a write transaction.\n'
		exit 2
	    elif [ "$lockOwner" = "$thisTransactionOwner" ] || { isSharedOwnership && [ "$thisTransactionMode" = 'read' ]; }; then
		if isLockExpired; then
		    case "$thisTransactionMode" in
			read)
			    shared=; isSharedOwnership && shared='shared'
			    printf >&2 'Warning: Current %stransaction timed out %d second%s ago.\n' "${shared}${shared:+ }" "$diff" "$diffPlural"
			    ;;
			write)
			    errorPrintf 'Current transaction timed out %d second%s ago.\n' "$diff" "$diffPlural"
			    exit 6
			    ;;
		    esac
		fi
	    else
		errorPrintf 'Another %s has been started; any changes have been lost.\n' "$(getTransactionDescription)"
		exit 6
	    fi
	else
	    errorPrintf 'Not inside a transaction, or the transaction has timed out and another transaction was completed.\n'
	    exit 6
	fi
	;;
    *)
	printf >&2 'ASSERT: Invalid method: %s\n' "$method"
	exit 2
	;;
esac
